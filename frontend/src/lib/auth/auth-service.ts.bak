/**
 * Authentication service
 */
import { AuthError } from './auth-errors'
import { TokenManager } from './token-manager'
import type { LoginCredentials, RegisterData, User } from './types'

export class AuthService {
  private tokenManager: TokenManager

  constructor(private api = require('./auth-api').AuthAPI) {
    this.tokenManager = new TokenManager()
  }

  /**
   * Log in user with email and password
   */
  async login(credentials: LoginCredentials) {
    if (!this.isValidEmail(credentials.email)) {
      throw new AuthError('Invalid email format')
    }

    const response = await this.api.login(credentials)

    if (response.success) {
      this.tokenManager.setTokens(response.tokens)
      localStorage.setItem('user_profile', JSON.stringify(response.user))
    }

    return response
  }

  /**
   * Register new user
   */
  async register(data: RegisterData) {
    if (!this.isValidEmail(data.email)) {
      throw new AuthError('Invalid email format')
    }

    this.validatePasswordStrength(data.password)

    const response = await this.api.register(data)

    if (response.success) {
      this.tokenManager.setTokens(response.tokens)
      localStorage.setItem('user_profile', JSON.stringify(response.user))
    }

    return response
  }

  /**
   * Log out current user
   */
  async logout() {
    await this.api.logout()
    this.tokenManager.clearTokens()
  }

  /**
   * Log out from all devices
   */
  async logoutAll() {
    await this.logout()
    // Additional API call could be made here to invalidate all sessions
  }

  /**
   * Check if user is authenticated
   */
  isAuthenticated(): boolean {
    const { accessToken } = this.tokenManager.getTokens()
    const userProfile = localStorage.getItem('user_profile')
    return Boolean(accessToken && userProfile)
  }

  /**
   * Get current user profile
   */
  getCurrentUser(): User | null {
    const userProfile = localStorage.getItem('user_profile')
    return userProfile ? JSON.parse(userProfile) : null
  }

  /**
   * Refresh authentication tokens
   */
  async refreshTokens() {
    const { refreshToken } = this.tokenManager.getTokens()
    if (!refreshToken) {
      throw new AuthError('No refresh token available')
    }

    try {
      const tokens = await this.api.refreshTokens(refreshToken)
      this.tokenManager.setTokens(tokens)
      return tokens
    } catch (error) {
      this.tokenManager.clearTokens()
      throw error
    }
  }

  /**
   * Request password reset email
   */
  async requestPasswordReset(email: string) {
    if (!this.isValidEmail(email)) {
      throw new AuthError('Invalid email format')
    }
    return this.api.requestPasswordReset(email)
  }

  /**
   * Validate email format
   */
  private isValidEmail(email: string): boolean {
    return email && email.includes('@')
  }

  /**
   * Validate password strength
   */
  validatePasswordStrength(password: string) {
    if (password.length < 8) {
      throw new AuthError('Password too weak')
    }
    // More password requirements could be added here
  }

  /**
   * Refresh session timestamp
   */
  refreshSession() {
    localStorage.setItem('session_timestamp', Date.now().toString())
  }

  /**
   * Check if session is valid
   */
  isSessionValid(): boolean {
    const timestamp = localStorage.getItem('session_timestamp')
    if (!timestamp) return false
    const timeDiff = Date.now() - parseInt(timestamp)
    return timeDiff < 30 * 60 * 1000 // 30 minutes
  }

  /**
   * Make authenticated request
   */
  async makeAuthenticatedRequest(url: string, options: RequestInit) {
    const { accessToken } = this.tokenManager.getTokens()
    
    const headers = {
      ...options.headers,
      'Authorization': `Bearer ${accessToken}`,
      'X-CSRF-Token': this.generateCSRFToken()
    }

    return fetch(url, { ...options, headers })
  }

  /**
   * Generate CSRF token
   */
  private generateCSRFToken(): string {
    // In a real implementation, this would be provided by the server
    return 'mock-csrf-token'
  }
}