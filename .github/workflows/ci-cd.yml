name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test-requirements.txt

    - name: Run Backend Unit Tests
      working-directory: ./backend
      env:
        TESTING: true
        JWT_SECRET_KEY: test_secret_key_for_testing_only
        JWT_ALGORITHM: HS256
        JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 30
        JWT_REFRESH_TOKEN_EXPIRE_DAYS: 7
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: test
        POSTGRES_PASSWORD: test
        POSTGRES_DB: test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_DB: 1
      run: |
        pytest tests/unit/ -v --tb=short --cov=src --cov-report=xml --cov-report=term-missing

    - name: Run Backend Integration Tests
      working-directory: ./backend
      env:
        TESTING: true
        JWT_SECRET_KEY: test_secret_key_for_testing_only
        JWT_ALGORITHM: HS256
        JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 30
        JWT_REFRESH_TOKEN_EXPIRE_DAYS: 7
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: test
        POSTGRES_PASSWORD: test
        POSTGRES_DB: test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_DB: 1
      run: |
        pytest tests/integration/ -v --tb=short

    - name: Run Backend Security Tests
      working-directory: ./backend
      env:
        TESTING: true
        JWT_SECRET_KEY: test_secret_key_for_testing_only
        JWT_ALGORITHM: HS256
        JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 30
        JWT_REFRESH_TOKEN_EXPIRE_DAYS: 7
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: test
        POSTGRES_PASSWORD: test
        POSTGRES_DB: test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_DB: 1
      run: |
        pytest tests/security/ -v --tb=short -m security

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install Frontend dependencies
      working-directory: ./frontend
      run: |
        npm ci
        npm install --save-dev jest-html-reporters jest-sonar-reporter @testing-library/jest-dom @testing-library/user-event

    - name: Run Frontend Unit Tests
      working-directory: ./frontend
      env:
        NODE_ENV: test
        NEXT_PUBLIC_API_URL: http://localhost:8000
        CI: true
      run: |
        npm run test:unit -- --coverage --ci --watchAll=false

    - name: Run Frontend Security Tests
      working-directory: ./frontend
      env:
        NODE_ENV: test
        NEXT_PUBLIC_API_URL: http://localhost:8000
        CI: true
      run: |
        npm run test:security -- --ci --watchAll=false

    - name: Run Frontend Integration Tests
      working-directory: ./frontend
      env:
        NODE_ENV: test
        NEXT_PUBLIC_API_URL: http://localhost:8000
        CI: true
      run: |
        npm run test:integration -- --ci --watchAll=false

    - name: Frontend Type Checking
      working-directory: ./frontend
      run: npm run typecheck

    - name: Frontend Linting
      working-directory: ./frontend
      run: |
        npm run lint
        npm run lint:security

    - name: Upload Frontend Coverage
      uses: actions/upload-artifact@v3
      with:
        name: frontend-coverage
        path: frontend/coverage/

    - name: Upload Backend Coverage
      uses: actions/upload-artifact@v3
      with:
        name: backend-coverage
        path: backend/htmlcov/

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Backend
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/prolaunch-backend:${{ github.sha }}

    - name: Build and push Frontend
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/prolaunch-frontend:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Deploy to production
      env:
        DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
      run: |
        # Add deployment steps here
        echo "Deployment steps will be added based on hosting infrastructure"